type AgentRegistration = record {
  agent_id : text;
  agent_principal : text;
  canister_id : text;
  capabilities : vec text;
  model_id : text;
  health_score : float32;
  registered_at : nat64;
  last_seen : nat64;
};

type InstructionRequest = record {
  request_id : text;
  user_principal : text;
  instructions : text;
  agent_count : opt nat32;
  model_preferences : vec text;
  created_at : nat64;
};

type AgentCreationStatus = variant {
  InProgress;
  Completed;
  Failed;
  QuotaExceeded;
};

type AgentCreationResult = record {
  request_id : text;
  created_agents : vec text;
  creation_time_ms : nat64;
  status : AgentCreationStatus;
};

type QuotaCheckResult = record {
  quota_available : bool;
  remaining_agents : nat32;
  monthly_limit : nat32;
  tier : text;
};

type InstructionAnalysisResult = record {
  request_id : text;
  parsed_requirements : vec text;
  suggested_agents : vec AgentSpec;
  coordination_plan : text;
  quota_check : QuotaCheckResult;
};

type AgentSpec = record {
  agent_type : text;
  required_capabilities : vec text;
  model_requirements : vec text;
  specialization : text;
};

type RoutingMode = variant {
  Unicast;
  Broadcast;
  AgentSpawning;
};

type RouteRequest = record {
  request_id : text;
  requester : text;
  capabilities_required : vec text;
  payload : vec nat8;
  routing_mode : RoutingMode;
};

type RouteResponse = record {
  request_id : text;
  selected_agents : vec text;
  routing_time_ms : nat64;
  selection_criteria : text;
};

type CoordinatorHealth = record {
  total_agents : nat32;
  active_agents : nat32;
  total_agent_creations : nat32;
  active_instructions : nat32;
  total_routes_processed : nat64;
  average_routing_time_ms : float64;
  dedup_cache_size : nat32;
};

type RoutingStats = record {
  agent_id : text;
  total_requests : nat64;
  success_rate : float32;
  average_response_time_ms : float64;
};

type SwarmTopology = variant { Mesh; Hierarchical; Ring; Star };
type OrchestrationMode = variant { Parallel; Sequential; Adaptive };
type SwarmPolicy = record {
  topology : SwarmTopology;
  mode : OrchestrationMode;
  top_k : nat32;
  window_ms : nat64;
};

type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : AgentRegistration; Err : text };
type Result_2 = variant { Ok : RouteResponse; Err : text };
type Result_3 = variant { Ok : AgentCreationResult; Err : text };
type Result_4 = variant { Ok : QuotaCheckResult; Err : text };
type Result_5 = variant { Ok : vec AgentRegistration; Err : text };
type Result_6 = variant { Ok : vec InstructionRequest; Err : text };
type Result_7 = variant { Ok : vec RoutingStats; Err : text };
type Result_8 = variant { Ok; Err : text };
type Result_9 = variant { Ok : InstructionAnalysisResult; Err : text };

service : {
  // Agent management
  register_agent : (AgentRegistration) -> (Result);
  get_agent : (text) -> (Result_1) query;
  list_agents : () -> (Result_5) query;
  list_user_agents : () -> (Result_5) query;
  update_agent_health : (text, float32) -> (Result_8);
  
  // OHMS 2.0: Instruction-based agent creation
  create_agents_from_instructions : (text, opt nat32) -> (Result);
  get_agent_creation_status : (text) -> (Result_3) query;
  list_instruction_requests : () -> (Result_6) query;
  get_instruction_analysis : (text) -> (Result_9) query;
  
  // Quota and subscription management
  get_user_quota_status : () -> (Result_4) query;
  
  // Routing and coordination
  route_request : (RouteRequest) -> (Result_2);
  route_best_result : (RouteRequest, nat32, nat64) -> (Result_2);
  get_routing_stats : (opt text) -> (Result_7) query;
  
  // System management
  health : () -> (CoordinatorHealth) query;
  set_swarm_policy : (SwarmPolicy) -> (Result_8);
  get_swarm_policy : () -> (SwarmPolicy) query;
}